id: 05_gcp_load_data_scheduled
namespace: bay-wheels
description: |
  Best to add a label `backfill:true` from the UI to track executions created via a backfill.
  CSV data used here comes from: https://s3.amazonaws.com/baywheels-data
  https://s3.amazonaws.com/baywheels-data/202008-baywheels-tripdata.csv.zip


inputs:
  - id: baywheels
    type: SELECT
    displayName: Select baywheels type
    values: [baywheels, baywheeels]
    defaults: baywheels

variables:
  file_id: "{{trigger.date | date('yyyyMM')}}-{{inputs.baywheels}}"
  file: "{{ vars.file_id }}-tripdata.csv"
  gcs_file: "gs://{{kv('GCP_BUCKET_NAME')}}/{{trigger.date | date('yyyyMM')}}-baywheels-tripdata.csv"
  table: "{{kv('GCP_DATASET')}}.baywheels_tripdata_{{trigger.date | date('yyyy_MM')}}"
  data: "{{outputs.extract.outputFiles[(trigger.date | date('yyyyMM')) ~ '-' ~ inputs.baywheels ~ '-tripdata' ~ '.csv']}}"


tasks:
  - id: set_label
    type: io.kestra.plugin.core.execution.Labels
    labels:
      file: "{{render(vars.file)}}"

  - id: extract
    type: io.kestra.plugin.scripts.shell.Commands
    outputFiles:
      - "*.csv"
    taskRunner:
      type: io.kestra.plugin.core.runner.Process
    commands:
      - wget -qO {{render(vars.file)}}.zip https://s3.amazonaws.com/baywheels-data/{{render(vars.file)}}.zip 
      - unzip -qo {{render(vars.file)}}.zip
      - rm {{render(vars.file)}}.zip

  - id: upload_to_gcs
    type: io.kestra.plugin.gcp.gcs.Upload
    from: "{{ render(vars.data) }}"
    to: "{{ render(vars.gcs_file) }}"

  - id: bq_baywheels_tripdata
    type: io.kestra.plugin.gcp.bigquery.Query
    sql: |
          CREATE TABLE IF NOT EXISTS `{{kv('GCP_PROJECT_ID')}}.{{kv('GCP_DATASET')}}.baywheels_tripdata`
          (
              unique_row_id BYTES OPTIONS (description = 'A unique identifier for the trip, generated by hashing key trip attributes.'),
              filename STRING OPTIONS (description = 'The source filename from which the trip data was loaded.'), 
              ride_id STRING OPTIONS (description = 'Ride ID'),
              rideable_type STRING OPTIONS (description = 'Ride Type: "classic_bike"=, "electric_bike"='),
              started_at TIMESTAMP OPTIONS (description = 'The started date and time'),
              ended_at TIMESTAMP OPTIONS  (description = 'The end date and time'),
              start_station_name STRING OPTIONS (description = 'Start Station Name'),
              start_station_id STRING OPTIONS (description = 'Start Station ID'),
              end_station_name STRING OPTIONS (description = 'End Station Name'),
              end_station_id STRING OPTIONS (description = 'End Station ID'),
              start_lat FLOAT64 OPTIONS (description = 'Start Station Latitude'),
              start_lng FLOAT64 OPTIONS (description = 'Start Station Longitude'),
              end_lat FLOAT64 OPTIONS (description = 'End Station Latitude'),
              end_lng FLOAT64 OPTIONS (description = 'End Station Longitude'),
              member_casual STRING OPTIONS (description = 'User Type (Subscriber or Customer -- "Subscriber" = Member or "Customer" = Casual)')
          )
          PARTITION BY DATE(started_at);

  - id: bq_baywheels_table_ext
    type: io.kestra.plugin.gcp.bigquery.Query
    sql: |
          CREATE OR REPLACE EXTERNAL TABLE `{{kv('GCP_PROJECT_ID')}}.{{render(vars.table)}}_ext`
          (
              ride_id STRING OPTIONS (description = 'Ride ID'),
              rideable_type STRING OPTIONS (description = 'Ride Type: "classic_bike"=, "electric_bike"='),
              started_at TIMESTAMP OPTIONS (description = 'The started date and time'),
              ended_at TIMESTAMP OPTIONS  (description = 'The end date and time'),
              start_station_name STRING OPTIONS (description = 'Start Station Name'),
              start_station_id STRING OPTIONS (description = 'Start Station ID'),
              end_station_name STRING OPTIONS (description = 'End Station Name'),
              end_station_id STRING OPTIONS (description = 'End Station ID'),
              start_lat FLOAT64 OPTIONS (description = 'Start Station Latitude'),
              start_lng FLOAT64 OPTIONS (description = 'Start Station Longitude'),
              end_lat FLOAT64 OPTIONS (description = 'End Station Latitude'),
              end_lng FLOAT64 OPTIONS (description = 'End Station Longitude'),
              member_casual STRING OPTIONS (description = 'User Type (Subscriber or Customer -- "Subscriber" = Member or "Customer" = Casual)')
          )
          OPTIONS (
              format = 'CSV',
              uris = ['{{render(vars.gcs_file)}}'],
              skip_leading_rows = 1,
              ignore_unknown_values = TRUE
          );

  - id: bq_baywheels_table_tmp
    type: io.kestra.plugin.gcp.bigquery.Query
    sql: |
          CREATE OR REPLACE TABLE `{{kv('GCP_PROJECT_ID')}}.{{render(vars.table)}}`
          AS
          SELECT
            MD5(CONCAT(
              COALESCE(CAST(rideable_type AS STRING), ""),
              COALESCE(CAST(started_at AS STRING), ""),
              COALESCE(CAST(ended_at AS STRING), ""),
              COALESCE(CAST(start_station_id AS STRING), ""),
              COALESCE(CAST(end_station_id AS STRING), "")
            )) AS unique_row_id,
            "{{render(vars.file)}}" AS filename,
            *
          FROM `{{kv('GCP_PROJECT_ID')}}.{{render(vars.table)}}_ext`;

  - id: bq_baywheels_merge
    type: io.kestra.plugin.gcp.bigquery.Query
    sql: |
          MERGE INTO `{{kv('GCP_PROJECT_ID')}}.{{kv('GCP_DATASET')}}.baywheels_tripdata` T
          USING `{{kv('GCP_PROJECT_ID')}}.{{render(vars.table)}}` S
          ON T.unique_row_id = S.unique_row_id
          WHEN NOT MATCHED THEN
            INSERT (unique_row_id, filename, ride_id, rideable_type, started_at, ended_at, start_station_name, start_station_id, end_station_name, end_station_id, start_lat, start_lng, end_lat, end_lng, member_casual)
            VALUES (S.unique_row_id, S.filename, S.ride_id, S.rideable_type, S.started_at, S.ended_at, S.start_station_name, S.start_station_id, S.end_station_name, S.end_station_id, S.start_lat, S.start_lng, S.end_lat, S.end_lng, S.member_casual);

  - id: purge_files
    type: io.kestra.plugin.core.storage.PurgeCurrentExecutionFiles
    description: If you'd like to explore Kestra outputs, disable it.
    disabled: false

pluginDefaults:
  - type: io.kestra.plugin.gcp
    values:
      serviceAccount: "{{kv('GCP_CREDS')}}"
      projectId: "{{kv('GCP_PROJECT_ID')}}"
      location: "{{kv('GCP_LOCATION')}}"
      bucket: "{{kv('GCP_BUCKET_NAME')}}"
  
triggers:
  - id: green_schedule
    type: io.kestra.plugin.core.trigger.Schedule
    cron: "@monthly"
    inputs:
      baywheels: baywheels